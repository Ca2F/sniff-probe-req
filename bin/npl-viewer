#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import urwid
from sniff_probe_req.probe_request_sniffer import ProbeRequestSniffer

class ProbeRequestSnifferTUI:
    palette = [
        ("foot", "dark cyan", "dark blue", "bold"),
        ("key", "light cyan", "dark blue", "underline"),
        ("selected", "black", "light gray"),
    ]

    footer_text = ("foot", [
        "    ",
        ("key", "SPACE"), " start/pause  ",
        ("key", "Q"), " quit",
    ])

    def __init__(self):
        self.stations = [
            "Station 1",
            "Station 2",
            "Station 3",
        ]

        self.pnl = [
            urwid.Text("ESSID 1"),
            urwid.Text("ESSID 2"),
            urwid.Text("ESSID 3"),
        ]

        self.view = self.setup_view()

    def setup_view(self):
        header = urwid.Text("Running... Interface: wlan0")
        footer = urwid.AttrWrap(urwid.Text(self.footer_text), "foot")
        vline = urwid.AttrWrap(urwid.SolidFill(u'\u2502'), 'line')

        stations_menu = urwid.Padding(self.setup_menu("Stations", self.stations), left=2, right=2)
        pnl_list = urwid.ListBox(self.pnl)

        body = urwid.Columns([
            stations_menu,
            ("fixed", 1, vline),
            pnl_list,
        ], focus_column=1)

        top = urwid.Frame(
            header=header,
            body=body,
            footer=footer
        )

        return top

    def setup_menu(self, title, choices):
        body = [urwid.Text(title), urwid.Divider()]

        for c in choices:
            button = urwid.Button(c)
            urwid.connect_signal(button, "click", self.item_chosen, c)
            body.append(urwid.AttrMap(button, None, focus_map="selected"))

        return urwid.ListBox(urwid.SimpleFocusListWalker(body))

    def item_chosen(button, choice):
        pass

    def main(self):
        self.loop = urwid.MainLoop(self.view, self.palette, unhandled_input=self.unhandled_keypress)
        self.loop.run()

    def exit_program(self):
        raise urwid.ExitMainLoop()

    def unhandled_keypress(self, key):
        if key in ('q', 'Q'):
            self.exit_program()
        elif key == "space":
            pass
        else:
            return

        return True

if __name__ == "__main__":
    ProbeRequestSnifferTUI().main()
